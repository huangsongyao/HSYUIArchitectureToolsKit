#!/bin/bash
#Author by huangsongyao 
#huangsongyao -> https://github.com/huangsongyao

#脚本绝对路径必须和私有库的.git隐藏文件在同一绝对路径下【需要查看时，请使用快捷键】# shname=$(basename $BASH_SOURCE) -> 获取脚本名称
work_path=$(dirname $0)
cd $work_path

#获取本地的repo列表
repoList=$(pod repo list)
#声明变量为sdk
read -p "请输入私有库git地址的名称：" hsyCocoapodsSDK
read -p "请输入GitHub仓库的仓库拥有者地址，例如https://github.com/huangsongyao，则输入huangsongyao：" developer_name
#声明一个变量，用于获悉外部输入的Yes或者No
isyes="yes"
#设置好这个远端地址
git_url=https://github.com/$developer_name/$hsyCocoapodsSDK.git
echo "******************即将作为远端的仓库地址******************"
echo $git_url
echo "*******************************************************"
#判断本地的repo列表中是否存在了对应的repo，如果不存在，则将远端仓库添加至本地，并创建一个origin分支
if [[ ${repoList} != *${hsyCocoapodsSDK}* ]]; then
	echo "远端仓库repo不存在本地，正在开启仓库克隆，可能会耗费一些时间"
	echo "第一次远端仓库repo克隆开始，仓库地址: ${git_url} --- 请稍等..."
	pod repo add $hsyCocoapodsSDK $git_url
#如果上个克隆操作失败，则重新执行一次克隆
	if [[ $? -ne 0 ]]; then
		echo "第一次克隆远端仓库的repo至本地失败!仓库地址: ${git_url} -> 正在尝试重新克隆，请稍等..."
		echo "开始第二次仓库克隆..."
		pod repo add $hsyCocoapodsSDK $git_url
#如果第二次克隆也失败，则根据用户自己的操作来决定是否要退出进程或是继续执行
		if [[ $? -ne 0 ]]; then
			read -p "第二次远端仓库repo克隆失败!是否退出进程重新执行本脚本？-> 退出进行输入[y] -> 继续执行脚本输入[n]：" exit_script
			if [[ $isyes == *$exit_script* ]]; then
				echo "正在退出脚本进程..."
				exit 0
			fi
		fi
	fi
fi
#打印本地的repo列表内容
echo "********************本地Mac设备中的repo列表如下********************"
pod repo list
echo "****************************************本***********************"
#将当前路径移动至Example的私有库项目下
cd $work_path/Example
#执行update，更新私有库的pod仓库插件，同步内容
read -p "请输入cocoapods的操作类型：-> 执行'pod install'输入[y] -> 执行'pod update'输入[n]：" operate_type
if [[ $isyes == *$operate_type* ]]; then
	pod install
else
	pod update
fi

#将当前路径移动至.git隐藏文件和脚本所在的绝对路径下
cd $work_path
#初始化git，创建远端仓库链接，创建origin远程分支
read -p "请输入这个GitHub账号的邮箱名称：" email_name 
git init
git config --global user.name $developer_name
git config --global user.email $email_name

#先检验远端是否已经存在了origin仓库，如果没有则添加一个origin仓库
all_remote=$(git remote -v)
echo "********************当前的remotes仓库**********************"
echo ${all_remote}
echo "**********************************************************"
if [[ ${all_remote} != *origin* ]]; then
	git remote add origin $git_url #git@github.com:$developer_name/$hsyCocoapodsSDK.git
fi

#输入当前更新财富私有库repo的远端仓库的tag标签号
read -p "请输入私有库的分支tag：" this_tag
#如果输入的tag标签不存在，则将这个标签tag添加至本地
all_tags=$(git tag)
if [[ ${all_tags} != *${this_tag}* ]]; then
	git tag $this_tag
fi
#执行一次push tags操作来避免本地有tags未能提交
git push --tags

#执行commit和push操作，将update之后的更新内容提交至git远端仓库
git add .
git commit -m "commit -> $hsyCocoapodsSDK" 
git pull origin master --allow-unrelated-histories 
#下拉成功后才能提交
if [[ $? -eq 0 ]]; then
	git push origin master
	#git push -u origin +master
else
	read -p "git pull失败，存在冲突，是否强制合并冲突，将线上内容覆盖至本地？ -> 强制覆盖本地请输入[y] -> 退出脚本进程检查冲突问题请输入[n]：" forced_cover
	if [[ $isyes == *$forced_cover* ]]; then
		git fetch --all && git reset --hard origin/master && git pull
	else
		echo "Git pull失败！正在退出进程！"
		exit 0
	fi
fi

#判断git操作是否成功，如果不成功则退出，避免出现漏提交
if [[ $? -eq 0 ]]; then
	echo "************************即将进入.podspec文件的校验环境，请确保.podspec文件的ruby语法的正确性***********************"
#私有库校验和更新repo输入y，公有库输入n
	read -p "验证私有库/公有库请输入 -> 私有库[y] -> 公有库[n]：" privates
#通过pod指令校验.podspec私有库/公有库文件是否合法
	if [[ $isyes == *$privates* ]]; then
#如果私有库中引用了其他私有库，则需要另外的校验格式
		read -p "这个私有库中是否引用了其他私有库？ -> 引用过[y] -> 没引用过[n]：" prevateIncludeOtherPrivates
		if [[ $isyes == *$prevateIncludeOtherPrivates* ]]; then
			read -p "请输入所引用的私有库的git仓库地址，若有多个，请用[,]逗号隔开：" thisprivates
			pod spec lint $hsyCocoapodsSDK.podspec --sources="$thisprivates, https://github.com/CocoaPods/Specs.git" --allow-warnings --use-libraries --verbose
		else
			pod spec lint $hsyCocoapodsSDK.podspec --allow-warnings --use-libraries
		fi
	else
#
		read -p "这个公有库中是否引用了其他私有库？ -> 引用过[y] -> 没引用过[n]：" publicIncludeOtherPrivates
		if [[ $isyes == *$publicIncludeOtherPrivates* ]]; then
			read -p "请输入所引用的私有库的git仓库地址，若有多个，请用[,]逗号隔开：" otherprivates
			pod lib lint $hsyCocoapodsSDK.podspec --sources="$otherprivates, https://github.com/CocoaPods/Specs.git" --allow-warnings --use-libraries 
		else
			pod lib lint $hsyCocoapodsSDK.podspec --allow-warnings --use-libraries
		fi
	fi

#判断校验指令是否成功，根据结果决定接下去的操作步骤
	if [[ $? -eq 0 ]]; then
#由发布者决定在通过验证后是否立即将.podspec发布到对应的环境下
		read -p "是否立即将私有库/公有库的.podspec发布出去？-> 立即发布请输入[y] -> 不立即发布请输入[n]：" release_podspec
		if [[ $isyes == *$release_podspec* ]]; then
#将合法的私有库/公有库文件.podspec推送至远端仓库
			if [[ $isyes == *$privates* ]]; then
				pod repo push $hsyCocoapodsSDK $hsyCocoapodsSDK.podspec --allow-warnings --use-libraries
			else
				pod trunk push $hsyCocoapodsSDK.podspec --allow-warnings --use-libraries
			fi
#完成后执行拉去操作，将远端仓库的内容拉取至本地
			git pull origin master --allow-unrelated-histories 
#同步更新本地的repo仓库状态
			git repo update
			echo "新版本发布完毕，正在准备退出进程!"
		else
			echo "podspec文件验证通过，不立即发布该版本，完成，准备退出进程!"
		fi
	else
#如果校验不通过，打印失败
		echo "podspec文件校验失败！请检查！注意----正在准备退出进程！"
	fi
else
#如果git提交失败则退出
	echo "Git仓库提交失败，请检查。"
	echo "注意!由于仓库提交失败，正在退出进程，请稍后检查完毕确认问题后，重新执行本脚本!!"
fi

exit 0


